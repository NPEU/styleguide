/*    Distribute items inside a container.*/$distribute-namespace: l- !default;$distribute-spacing-unit: 2rem !default;$distribute-spacing-unit--small: ($distribute-spacing-unit / 2) !default;$distribute-spacing-unit--large: ($distribute-spacing-unit * 2) !default;$distribute-bases: (    15,    20,    25,    30,    35) !default;/*    IE11 needs this wrapper to behave properly.    If you're not supporting IE11, you don't this this CSS or the HTML that goes with it.*/.#{$distribute-namespace}distribute-wrap {    display: -ms-flexbox;    display: flex;    width: 100%;    & > .#{$distribute-namespace}distribute {        -webkit-flex-basis: 100%;        -ms-flex-preferred-size: 100%;         flex-basis: 100%;    }}.#{$distribute-namespace}distribute {    &#{&} {        margin: 0;        padding: 0;        list-style-type: none;        display: -webkit-flex;        display: -ms-flexbox;        display: flex;        -webkit-flex-direction: row;            -ms-flex-direction: row;                flex-direction: row;        -webkit-flex-wrap: wrap;            -ms-flex-wrap: wrap;                flex-wrap: wrap;        -webkit-justify-content: space-around;                  -ms-flex-pack: distribute;                justify-content: space-around;        /*-webkit-align-items: flex-start;             -ms-flex-align: start;                align-items: flex-start;*/        -webkit-align-items: stretch;             -ms-flex-align: stretch;                align-items: stretch;        --s: 0;    }    & > * {        display: inline-block; /* [1] */        -webkit-flex: 0 1 auto;            -ms-flex: 0 1 auto;                flex: 0 1 auto;        margin: 0;        padding: 0;    }    &#{&}--start {        -webkit-justify-content: flex-start;                  -ms-flex-pack: start;                justify-content: flex-start;    }    &#{&}--end {        -webkit-justify-content: flex-end;                  -ms-flex-pack: end;                justify-content: flex-end;    }/*    &#{&}--limit-10 > * {        -webkit-flex-basis: 10em;                flex-basis: 7.5em;                 max-width: 10em;    }    &#{&}--limit-15 > *  {        -webkit-flex-basis: 15em;                flex-basis: 11.25em;                 max-width: 15em;    }    &#{&}--limit-20 > *  {        -webkit-flex-basis: 20em;                flex-basis: 15em;                 max-width: 20em;    }    &#{&}--limit-25 > *  {        -webkit-flex-basis: 25em;                flex-basis: 18.75em;                 max-width: 25em;    }    &#{&}--limit-30 > *  {        -webkit-flex-basis: 30em;                flex-basis: 22.5em;                 max-width: 30em;    }    &#{&}--limit-35 > *  {        -webkit-flex-basis: 35em;                flex-basis: 26.25em;                 max-width: 35em;    }    &#{&}--limit-40 > *  {        -webkit-flex-basis: 40em;                flex-basis: 30em;                 max-width: 40em;    }*/    // Add gutters:    &#{&}--gutter--s,    &#{&}--gutter--s > * {        padding: $distribute-spacing-unit--small / 2;        --s: #{$distribute-spacing-unit--small};    }    &#{&}--gutter,    &#{&}--gutter > *,    &#{&}--gutter--m,    &#{&}--gutter--m > * {        padding: $distribute-spacing-unit / 2;        --s: #{$distribute-spacing-unit};    }    &#{&}--gutter--l,    &#{&}--gutter--l > * {        padding: $distribute-spacing-unit--large / 2;        --s: #{$distribute-spacing-unit--large};    }    // Add these classes to a wrapper if you want to flush the edge gutters:    @at-root {        #{&}--flush-edge-gutters {            overflow: hidden;            -ms-flex-preferred-size: 100%;            flex-basis: 100%;        }            #{&}--flush-edge-gutters &#{&}--gutter--small {                margin: -$distribute-spacing-unit--small;            }            #{&}--flush-edge-gutters &#{&}--gutter,            #{&}--flush-edge-gutters &#{&}--gutter--medium {                margin: -$distribute-spacing-unit;            }            #{&}--flush-edge-gutters &#{&}--gutter--large {                margin: -$distribute-spacing-unit--large;            }    }    // Bottom-heavy balancing:    &#{&}--bottom-heavy > * {        -webkit-box-flex: 1;       -ms-flex-positive: 1;               flex-grow: 1;    }    // Item bases:    @each $distribute-basis in $distribute-bases {        &#{&}--basis-#{$distribute-basis} > * {            -webkit-flex-basis: #{$distribute-basis}rem;            -ms-flex-preferred-size: #{$distribute-basis}rem;            flex-basis: #{$distribute-basis}rem;            --b: #{$distribute-basis}rem;        }    }            }// Top-heavy balancing:// ALl browsers that support min/max also support custom properties.// BP1 (BreakPoint1) should be calculated based on the min width of each item in a row up to the// max items per row.// So for example having bp1=60rem works for 2up, (2x30rem) but that BP would make 3up items 20rem// wide which may to too narrow.// UGH 2 should be able to fit side-by-side SOONER than 3. But maybe I can't do the balancing?// For even as few as 3 items there's a choice in how it should be displayed / behave:// Column | 1,2 | 3 OR just Column | 3. (no intermediary)// OR Column | 1,2 (no single row)@supports (width: unquote("max(1px, 1px)")) {    .#{$distribute-namespace}distribute {        // One spacing unit should be the gutter.        // 2-up = 1 gutter (if flushed) or 3 gutters.        // 3-up = 2 gutters (if flushed) or 4 gutters.        // ...        &#{&}--top-heavy {            //--sp: #{$distribute-spacing-unit / 2};            --bp1: 90rem;            --bp1-2: 110rem;            --bp2: 130em;        }        /* 1 or more: */        &#{&}--top-heavy > * {            flex-basis: 100%;            flex-grow: 1;        }        /* 2 or more: */        &#{&}--top-heavy > :nth-last-child(n+2),        &#{&}--top-heavy > :nth-last-child(n+2) ~ * {            //flex-basis: unquote("max(50%, (var(--bp1) - 100%) * 999)");            flex-basis: unquote("max(50%, ((var(--b) * 2) - 100%) * 999)");        }        /* 3 or more: - note this should be part of col-to-row*/        /*&#{&}--top-heavy > :nth-last-child(n+3),        &#{&}--top-heavy > :nth-last-child(n+3) ~ * {            //flex-basis: unquote("max(33%, (var(--bp1) - 100%) * 999)");            flex-basis: unquote("max(33%, ((var(--b) * 3) - 100%) * 999)");        }*/        /* 3 or more: */        &#{&}--top-heavy > :nth-last-child(n+3),        &#{&}--top-heavy > :nth-last-child(n+3) ~ * {            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999))");        }        /* 3 or more, different values for the first one: */        &#{&}--top-heavy > :nth-last-child(n+3) {            flex-basis: unquote("max(33%, ((var(--b) * 3) - 100%) * 999)");        }        /* 4 or more: */        &#{&}--top-heavy > :nth-last-child(n+4),        &#{&}--top-heavy > :nth-last-child(n+4) ~ * {            //flex-basis: unquote("min(max(50%, (var(--bp1) - 100%) * 999), max(25%, (var(--bp2) - 100%) * 999))");            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999))");        }        /*        From here on in there are increasingly more possibilities on how things can be laid out.        More items = more possibilities. I've tried to go for what I consider to be the most balanced option but almost all other possibilities are achievable.        */        /* 5 or more: */        &#{&}--top-heavy > :nth-last-child(n+5),        &#{&}--top-heavy > :nth-last-child(n+5) ~ * {            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999))");        }        /* 5 or more, different values for the first two: */        &#{&}--top-heavy > :nth-last-child(n+5),        &#{&}--top-heavy > :nth-last-child(n+5) + * {            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999))");        }        /* 5 or more, different values for the first one: */        &#{&}--top-heavy > :nth-last-child(n+5) {            flex-basis: unquote("min(max(50%, ((var(--b) * 3) - 100%) * 999), max(100%, ((var(--b) * 4) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999))");        }        /* 6 or more: */        &#{&}--top-heavy > :nth-last-child(n+6),        &#{&}--top-heavy > :nth-last-child(n+6) ~ * {            //flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999))");            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999))");        }        // The idea of the following is to follow what happens on the 'bottom-heavy' version        // (inverted), in that when there's room for 4up, the first two are 50%, and when there's        // room for 5, the first 1 is 100%,        // BUT, I can't figure out the math to allow for this, because `min()` will choose the 33%        // basis instead of the 4up 50% basis, because it must calculate as smaller.        // So, I'm having to break the pattern here stick to the these changes:        // 1x6, 2x3, 3x2, 6x1 (unless a solution comes to me)        /* 6 or more, different values for the first two: */        /*&#{&}--top-heavy > :nth-last-child(n+6),        &#{&}--top-heavy > :nth-last-child(n+6) + * {            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(50%, ((var(--b) * 4) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999))");        }*/        /* 6 or more, different values for the first one: */        /*&#{&}--top-heavy > :nth-last-child(n+6) {            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(50%, ((var(--b) * 4) - 100%) * 999), max(100%, ((var(--b) * 5) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999))");        }*/        /*            It's worth noting here that things get especially tricky and messy. We've already seen            with 6 we've had to skip some steps, and things like 7 and 11 are quite hard too.            Also with ANY amount, the practicalities of allowing all arrangements up to a single            row become limiting.            If you assume you have items that are quite small - and can therefore fit into a single            row - a small reduction in available width that causes wrapping would leave a very large            item on it's own row. This is the whole reason we want to balance things in the first            place, so that this doesn't happen - we want a reduction in available width that causes            wrapping to lead to MORE items being wrapped and thus creating a better balance.            It's just very hard to know where things SHOULD land.        */                /* 7 or more: (1x7 | 1,2x3 | 1,3x2 | 3,4) */        &#{&}--top-heavy > :nth-last-child(n+7),        &#{&}--top-heavy > :nth-last-child(n+7) ~ * {            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(14%, ((var(--b) * 7) - 100%) * 999))");        }        /* 7 or more, different values for the second and third: */        &#{&}--top-heavy > :nth-last-child(n+7) + *,        &#{&}--top-heavy > :nth-last-child(n+7) + * + * {            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(14%, ((var(--b) * 7) - 100%) * 999))");        }                /* 7 or more, different values for the first one: */        &#{&}--top-heavy > :nth-last-child(n+7) {            flex-basis: unquote("min(max(33%, ((var(--b) * 4) - 100%) * 999), max(14%, ((var(--b) * 7) - 100%) * 999))");        }                /* 8 or more: */        &#{&}--top-heavy > :nth-last-child(n+8),        &#{&}--top-heavy > :nth-last-child(n+8) ~ * {            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(12%, ((var(--b) * 8) - 100%) * 999))");        }        /* 9 or more: */        &#{&}--top-heavy > :nth-last-child(n+9),        &#{&}--top-heavy > :nth-last-child(n+9) ~ * {            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(11%, ((var(--b) * 9) - 100%) * 999))");        }        /* 9 or more, different values for the first one: */        &#{&}--top-heavy > :nth-last-child(n+9) {            flex-basis: unquote("min(max(33%, ((var(--b) * 3) - 100%) * 999), max(11%, ((var(--b) * 9) - 100%) * 999))");        }        /* 10 or more: */        &#{&}--top-heavy > :nth-last-child(n+10),        &#{&}--top-heavy > :nth-last-child(n+10) ~ * {            flex-basis: unquote("min(max(50%, ((var(--b) * 2)- 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999), max(10%, ((var(--b) * 10) - 100%) * 999))");        }        /* 11 or more: */        &#{&}--top-heavy > :nth-last-child(n+11),        &#{&}--top-heavy > :nth-last-child(n+11) ~ * {            //flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(20%, ((var(--b) * 5) - 100%) * 999), max(9%, ((var(--b) * 11) - 100%) * 999))");            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(9%, ((var(--b) * 11) - 100%) * 999))");        }                /* 11 or more, different values for the second one: */        &#{&}--top-heavy > :nth-last-child(n+11) + * {            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(9%, ((var(--b) * 11) - 100%) * 999))");        }                /* 11 or more, different values for the first one: */        &#{&}--top-heavy > :nth-last-child(n+11) {            flex-basis: unquote("min(max(50%, ((var(--b) * 3) - 100%) * 999), max(9%, ((var(--b) * 11) - 100%) * 999))");        }        /* 11 or more, different values for the next 3 ...: */        /*&#{&}--top-heavy > :nth-last-child(n+11) ~ :nth-child(5),        &#{&}--top-heavy > :nth-last-child(n+11) ~ :nth-child(5) ~ * {            flex-basis: unquote("max(33%, (var(--bp2) - 100%) * 999)");        }*/        /* 11 or more, different values for the last 4 ...: */        /*&#{&}--top-heavy > :nth-last-child(n+11) ~ :nth-child(7),        &#{&}--top-heavy > :nth-last-child(n+11) ~ :nth-child(7) ~ * {            flex-basis: unquote("max(25%, (var(--bp2) - 100%) * 999)");        }*/        /* 12 or more: double class to boost specificity - ugh.*/        &#{&}#{&}--top-heavy > :nth-last-child(n+12),        &#{&}#{&}--top-heavy > :nth-last-child(n+12) ~ * {            flex-basis: unquote("min(max(50%, ((var(--b) * 2) - 100%) * 999), max(33%, ((var(--b) * 3) - 100%) * 999), max(25%, ((var(--b) * 4) - 100%) * 999), max(16%, ((var(--b) * 6) - 100%) * 999), max(8%, ((var(--b) * 12) - 100%) * 999))");        }    }}/* IE10-11 */// Max-width causes problems so the desired behaviour isn't actually achievable. Getting as close// as I can.@media #{$f__ie10-11} {    .#{$distribute-namespace}distribute {        &#{&}--limit-10 > * {            width: 10em;            -ms-flex-preferred-size: auto;            flex-basis: auto;        }        &#{&}--limit-15 > *  {            width: 15em;            -ms-flex-preferred-size: auto;            flex-basis: auto;        }        &#{&}--limit-20 > *  {            width: 20em;            -ms-flex-preferred-size: auto;            flex-basis: auto;        }        &#{&}--limit-25 > *  {            width: 25em;            -ms-flex-preferred-size: auto;            flex-basis: auto;        }        &#{&}--limit-30 > *  {            width: 30em;            -ms-flex-preferred-size: auto;            flex-basis: auto;        }        &#{&}--limit-35 > *  {            width: 35em;            -ms-flex-preferred-size: auto;            flex-basis: auto;        }        &#{&}--limit-40 > *  {            width: 40em;            -ms-flex-preferred-size: auto;            flex-basis: auto;        }    }}// IE10// Padding causes size problems for flex, so tweak for that:_:-ms-lang(x), .#{$distribute-namespace}distribute.#{$distribute-namespace}distribute {    max-width: 100%\9;}/*    Older webkit browsers also need special treatment.    1. Chrome 39-50, Opera 26-37, Safari/iOS 9-10. Using prefixed property as flex-direction       breaks IE11 otherwise, so may as well use for all.*/_:-webkit-any-link, :root .#{$distribute-namespace}distribute.#{$distribute-namespace}distribute > *{    display: flex; /* [1] */    flex-direction: column /* [1] */;}